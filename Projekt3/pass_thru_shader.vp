#version 330

in vec4 vVertex;
in vec3 vNormal;

out vec4 vVaryingColor;

uniform mat4x4 MVMatrix;
uniform mat4x4 MVPMatrix;
uniform mat3x3 normalMatrix;
uniform vec3 ambientLight;

//Dla œwiate³ punktowych zdefiniujemy sobie specjaln¹ stukture:
struct pointLight {
    vec3  position;
    vec3  color;
    float attenuation0;
    float attenuation1;
    float attenuation2;
    float angle;
};
uniform pointLight light1;

/*Do tej pory przekazywaliœmy kolor jako attrubut wierzcho³ka, jeœ³i jednak za³o¿ymy, 
ze ca³e modele s¹ wykonane z tego samego materia³u, mo¿emy w³asnoœci materia³ów podawaæ jako uniform.*/
struct materialProperties {
    vec3  ambientColor;
    vec3  diffuseColor;
    vec3  specularColor;
    float specularExponent;
};
uniform materialProperties material;

void main() {
    vec4 positionInEyeSpace4 = MVMatrix * vVertex;
    vec3 positionInEyeSpace3 = positionInEyeSpace4.xyz / positionInEyeSpace4.w;
    vec3 normalInEyeSpace = normalize(normalMatrix * vNormal);
    gl_Position = MVMatrix*vVertex;

    vVaryingColor.rgb = material.ambientColor;
    vVaryingColor.a = 1.0;
    vec3 toLight = light1.position-positionInEyeSpace3;
    float r = length(toLight);
    float intensity = 1.0 / (light1.attenuation0+light1.attenuation1*r+light1.attenuation2*r);
    vec3 lightDirection = normalize(toLight);
    float diffuse = max(0.0, dot(normalInEyeSpace, lightDirection));
    vVaryingColor.rgb += intensity*diffuse*material.diffuseColor*light1.color;

    if(diffuse>0.0){
        vec3 halfVector = normalize(lightDirection - normalize(positionInEyeSpace3));
        float specular =max(0.0, dot(halfVector, normalInEyeSpace));
        float fspecular = pow(specular, material.specularExponent);
        vVaryingColor.rgb += intensity*fspecular*light1.color*material.specularColor;
    }
}

 